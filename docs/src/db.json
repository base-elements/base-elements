{
  "docs": [
    {
      "path": "src/markdown/angular.md",
      "slug": "angular",
      "name": "Angular",
      "desc": "angular",
      "category": "Guides",
      "icon": "file-tray-stacked-outline",
      "content": ""
    },
    {
      "path": "src/markdown/attributes.md",
      "slug": "attributes",
      "name": "Attributes",
      "desc": "Attributes",
      "category": "Concepts",
      "icon": "file-tray-stacked-outline",
      "content": "\n# Attributes\n\nElements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.\n\n## Examples\n\nLet's take the `core-select` element as an example. Because of it's complexity, it is also the element with the most amount of attributes so we can control its behaviour according to our needs.\n\nPlay around by modifying the different attributes, and look at the src tab to see how the HTML looks like when the attribute is added\n\n<core-knobs hideEvents tab=\"props\" element=\"core-select\">\n  <core-select>\n    <core-option value=\"1\" selected>Label 1</core-option>\n    <core-option value=\"2\">Label 2</core-option>\n    <core-option value=\"3\">Label 3</core-option>\n  </core-select>\n</core-knobs>\n\n<core-checkbox \n  full \n  id=\"CoreCheckbox\"\n  onchange=\"(() => CoreButton.disabled = !CoreCheckbox.checked)()\">\nI have read terms and conditions\n</core-checkbox>\n<core-button disabled id=\"CoreButton\">Submit</core-checkbox>\n\n<core-box margin-b=\"lg\">\n  <core-tabs>\n    <core-tab target=\"javascript\" selected>Pure Javascript</core-tab>\n    <core-tab target=\"react\">React</core-tab>\n    <core-tab target=\"vue\">Vue</core-tab>\n    <core-tab target=\"angular\">Angular</core-tab>\n  </core-tabs>\n</core-box>\n\n<div id=\"javascript\">\n\n```html\n<body>\n  <div>\n    <core-checkbox class=\"checkbox\" full>\n      I have read terms and conditions\n    </core-checkbox>\n    <core-button class=\"button\">Submit</core-button>\n  </div>\n\n  <script>\n    const checkbox = document.querySelector(\".checkbox\");\n    const button = document.querySelector(\".button\");\n\n    checkbox.addEventListener(\"change\", (e) => {\n      button.disabled = !e.target.checked;\n    });\n  </script>\n</body>\n```\n\n</div>\n\n<div id=\"react\">\n\n```jsx\nimport React, { useState } from \"react\";\nimport reactify from \"reactify-wc\";\n\nconst CoreCheckbox = reactify(\"core-checkbox\");\nconst CoreButton = reactify(\"core-button\");\n\nfunction Component() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <div>\n      <CoreCheckbox\n        full\n        checked={checked}\n        onChange={(e) => setChecked(e.target.checked)}\n      >\n        I have read terms and conditions\n      </CoreCheckbox>\n      <CoreButton disabled={!checked} variant=\"primary\">\n        Submit\n      </CoreButton>\n    </div>\n  );\n}\n```\n\n</div>\n\n<div id=\"vue\">\n\n```html\n<template>\n  <div>\n    <core-checkbox\n      :checked=\"checked\"\n      @change=\"e => checked = e.target.disabled\"\n    >\n      I have read terms and conditions\n    </core-checkbox>\n    <core-button :disabled=\"!checked\">Submit</core-button>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        checked: false,\n      };\n    },\n  };\n</script>\n```\n\n</div>\n"
    },
    {
      "path": "src/markdown/events.md",
      "slug": "Events",
      "name": "Events",
      "desc": "Events",
      "category": "Concepts",
      "icon": "file-tray-stacked-outline",
      "content": "\n# Events\n\nListening to events from a `core-element` works just like a normal HTML element – simply attach an event listener on it.\n\nTo see what kind of events an element emits, visit the domumentation for that component and you will find the `events` tab.\n\n## Example\n\nLet's say we have a checkbox that needs to be checked before the user can continue.\nBy listening to the `change` event on the checkbox element you can react to interactions by the user.\n\n<core-checkbox \n  full \n  id=\"CoreCheckbox\"\n  onchange=\"(() => CoreButton.disabled = !CoreCheckbox.checked)()\">\nI have read terms and conditions\n</core-checkbox>\n<core-button disabled id=\"CoreButton\">Submit</core-checkbox>\n\n<core-box margin-b=\"lg\">\n  <core-tabs>\n    <core-tab target=\"javascript\" selected>Pure Javascript</core-tab>\n    <core-tab target=\"react\">React</core-tab>\n    <core-tab target=\"vue\">Vue</core-tab>\n    <core-tab target=\"angular\">Angular</core-tab>\n  </core-tabs>\n</core-box>\n\n<div id=\"javascript\">\n\n```html\n<body>\n  <div>\n    <core-checkbox class=\"checkbox\" full>\n      Submit\n    </core-checkbox>\n    <core-button class=\"button\">Submit</core-button>\n  </div>\n\n  <script>\n    const checkbox = document.querySelector(\".checkbox\");\n    const button = document.querySelector(\".button\");\n\n    checkbox.addEventListener(\"change\", (e) => {\n      button.disabled = !e.target.checked;\n    });\n  </script>\n</body>\n```\n\n</div>\n\n<div id=\"react\">\n\n```jsx\nimport React, { useState } from \"react\";\nimport reactify from \"reactify-wc\";\n\nconst CoreCheckbox = reactify(\"core-checkbox\");\nconst CoreButton = reactify(\"core-button\");\n\nfunction Component() {\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <div>\n      <CoreCheckbox\n        full\n        checked={checked}\n        onChange={(e) => setChecked(e.target.checked)}\n      >\n        I have read terms and conditions\n      </CoreCheckbox>\n      <CoreButton disabled={!checked} variant=\"primary\">\n        Submit\n      </CoreButton>\n    </div>\n  );\n}\n```\n\n</div>\n\n<div id=\"vue\">\n\n```html\n<template>\n  <div>\n    <core-checkbox\n      :checked=\"checked\"\n      @change=\"e => checked = e.target.disabled\"\n    >\n      I have read terms and conditions\n    </core-checkbox>\n    <core-button :disabled=\"!checked\">Submit</core-button>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        checked: false,\n      };\n    },\n  };\n</script>\n```\n\n</div>\n"
    },
    {
      "path": "src/markdown/installation.md",
      "slug": "installation",
      "name": "Installation",
      "desc": "Installation",
      "category": "Getting Started",
      "icon": "file-tray-stacked-outline",
      "content": "\n# Installation\n\n<core-tabs>\n  <core-tab target=\"cdn-tab\" selected>CDN</core-tab>\n  <core-tab target=\"npm-tab\">NPM</core-tab>\n</core-tabs>\n\n<div id=\"cdn-tab\">\n\n### CDN\n\nCreate an `index.html` file and load the components with the CDN at the end of `<body>`:\n\n```html\n<script src=\"https://unpkg.com/core-elements\"></script>\n```\n\nThe components are now available to use like this:\n\n´´´html\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>title</title>\n  </head>\n  <body>\n  <core-button>Hello</core-button>\n  <script src=\"https://unpkg.com/core-elements\"></script>\n  </body>\n</html>\n´´´\n\n### As module\n\n´´´html\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>title</title>\n  </head>\n  <body>\n  <core-button>Hello</core-button>\n  <script type=\"module\">\n  import CoreButton from '\n\n  </script>\n  </body>\n</html>\n´´´\n\n</div>\n\n<div id=\"npm-tab\">\n\n### NPM\n\nRun this command in the root of your project:\n\n```js\nnpm install --save core-elements\n\n```\n\nThen import all the components:\n\n```js\nimport * from \"core-elements\";\n```\n\nor individual component:\n\n```js\nimport { CoreButton } from \"core-elements\";\n```\n\n</div>\n"
    },
    {
      "path": "src/markdown/introduction.md",
      "slug": "introduction",
      "name": "Introduction",
      "desc": "Introduction",
      "category": "Getting Started",
      "icon": "file-tray-stacked-outline",
      "content": "\n# Introduction\n\nStandard HTML elements like `<checkbox>` and `<select>` are notoriously difficult to style and does not provide enough customizablility to be sufficient for more than basic web pages.\n\nCore Elements is a collection of common, general-purpose UI elements such as lists, menus, modals, multi-select, and so on. The elements are easy to style and customize for your needs.\n"
    },
    {
      "path": "src/markdown/react.md",
      "slug": "react",
      "name": "React",
      "desc": "React",
      "category": "Guides",
      "icon": "file-tray-stacked-outline",
      "content": ""
    },
    {
      "path": "src/markdown/slots.md",
      "slug": "slots",
      "name": "Slots",
      "desc": "Slots",
      "category": "Concepts",
      "icon": "file-tray-stacked-outline",
      "content": ""
    },
    {
      "path": "src/markdown/styling.md",
      "slug": "styling",
      "name": "Styling",
      "desc": "Styling",
      "category": "Concepts",
      "icon": "file-tray-stacked-outline",
      "content": "\n# Styling\n\nBeing able to style and customize the components exactly like you want is usually a very important thing when it comes to third party UI libraries.\n\nSometimes it can be challenging when a third party select component uses Emotion for styling, but maybe you pull in a modal component that uses Styled components. Sometimes you can change the hover color, but you cannot change the arrow icon. This fragmentation of different styling techniques can sometimes make it difficult to ahieve consistent styling across components.\n\nWith core-elements you get components that can:\n\n- Be styled using pure CSS\n- Access all parts of the component for individual styling\n- Global CSS variables to quickly change colors and properties on all components\n- Local CSS variables to change individual components\n\n## Global-scoped variables\n\n### Customizing your theme\n\nYou can customize the colors and appearance of all the components by setting your own values for the global CSS variables. To see all the CSS variables available for global styling, check out the theme editor page.\n\n#### Example\n\n<core-knobs hideTabs>\n  <style>\n    .my-theme {\n      --core-color-primary: green;\n      --core-color-primary-hover: darkgreen;\n      --core-color-primary-contrast: white;\n      --core-element-height-default: 60px;\n      --core-border-radius-default: 30px;\n      --core-border-width-default: 4px;\n      --core-focus-outline: 0px 0px 0px 5px #fbcd83;\n    }\n  </style>\n\n  <div class=\"my-theme\">\n    <core-radio name=\"radio\">Radio</core-radio>\n    <core-radio name=\"radio\">Radio 2</core-radio>\n    <core-checkbox>Checkbox</core-checkbox>\n    <core-toggle>Toggle</core-toggle>\n    <core-button variant=\"primary\">Button</core-button>\n    <core-select placeholder=\"Select something\">\n      <core-option value=\"1\">Option 1</core-option>\n      <core-option value=\"2\">Option 2</core-option>\n    </core-select>\n    <core-input placeholder=\"Enter something\"></core-input>\n  </div>\n</core-knobs>\n\n### Adding your own variables\n\nCore elements only defines the colors primary, focus, danger, warning, success and ui. These are considered color names that are essential to most web applications.\n\nLet's say you want to add another color variant called `secondary`. We start by defining a secondary color, a secondary hover color, and a secondary contrast color for text that are supposed to go over this color.\n\n<core-knobs hideTabs>\n  <style>\n    :root {\n      --core-color-secondary: red;\n      --core-color-secondary-hover: darkred;\n      --core-color-secondary-contrast: white;\n    }\n  </style>\n</core-knobs>\n\nIf we want to be able to use our new colors for a button element, we simply add a selector for the `variant=\"secondary\"` attribute on the core button element.\n\nTips: Don't call your variables things like `--core-color-secondary-light`, consider calling them `--core-color-secondary-weak` as this will be easier to reason about if you decide to develop a dark theme.\n\n<core-knobs hideTabs>\n  <style>\n    :root {\n      --core-color-secondary: red;\n      --core-color-secondary-hover: darkred;\n      --core-color-secondary-contrast: white;\n    }\n    core-button[variant=\"secondary\"] {\n      background-color: var(--core-color-secondary);\n      color: var(--core-color-secondary-contrast);\n    }\n    core-button[variant=\"secondary\"]:hover {\n      background-color: var(--core-color-secondary-hover);\n    }\n  </style>\n\n  <body>\n    <core-button variant=\"primary\">Button</core-button>\n    <core-button variant=\"secondary\">Button</core-button>\n  </body>\n</core-knobs>\n\n## Element-scoped variables\n\nHere is an example on how you can use either CSS variables, or normal properties to style a checkbox label.\n\n<core-box padding-b=\"lg\">\n  <core-tabs>\n    <core-tab value=\"variables\" selected target=\"variables\">CSS Variables</core-tab>\n    <core-tab value=\"properties\" target=\"properties\">Regular properties</core-tab>\n  </core-tabs>\n</core-box>\n\n<div id=\"variables\">\n<core-knobs hideTabs element=\"core-checkbox\">\n  <style>\n    .checkbox-1 {\n      --core-checkbox-label-color: red;\n    }\n  </style>\n  <core-checkbox class=\"checkbox-1\" label=\"Checkbox label\"></core-checkbox>\n</core-knobs>\n</div>\n\n<div id=\"properties\">\n\nNotice how we use the `::part()` selector to target the part of the element we want.\nBecause this selector is not supported in all browsers yet, we recommend using CSS variables when possible. However using the selector won't break anything. The style changes will just not show.\n\n<core-knobs hideTabs element=\"core-checkbox\">\n  <style>\n    .checkbox-2::part(label) {\n      color: blue;\n    }\n  </style>\n  <core-checkbox class=\"checkbox-2\" label=\"Checkbox label\"></core-checkbox>\n</core-knobs>\n</div>\n"
    },
    {
      "path": "src/markdown/vanilla.md",
      "slug": "vanilla",
      "name": "Vanilla",
      "desc": "Vanilla",
      "category": "Guides",
      "icon": "file-tray-stacked-outline",
      "content": ""
    },
    {
      "path": "src/markdown/vue.md",
      "slug": "vue",
      "name": "Vue",
      "desc": "Vue",
      "category": "Guides",
      "icon": "file-tray-stacked-outline",
      "content": ""
    }
  ],
  "components": [
    {
      "path": "../lib/src/components/accordion/accordion.md",
      "name": "Accordion",
      "desc": "Accordions",
      "category": "Interaction",
      "icon": "file-tray-stacked-outline",
      "content": "\n<core-knobs element=\"core-accordion\">\n<core-accordion>\n  <core-accordion-item heading=\"Accordion 1\">\n    <core-box padding=\"md\">Content</core-box>\n  </core-accordion-item>\n  <core-accordion-item heading=\"Accordion 2\">\n    <core-box padding=\"md\">Content</core-box>\n  </core-accordion-item>\n  <core-accordion-item heading=\"Accordion 3\">\n    <core-box padding=\"md\">Content</core-box>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n\n## Custom indicator\n\n<core-knobs hideTabs element=\"core-accordion\">\n<style>\n  .indicator [slot=\"start\"] {\n    transform: rotate(0deg);\n    transition: all 0.2s ease;\n  }\n  .indicator[open] [slot=\"start\"] {\n    transform: rotate(90deg);\n  }\n</style>\n<core-accordion>\n  <core-accordion-item class=\"indicator\" hide-default-indicator heading=\"Heading\">\n    <i slot=\"start\" class=\"gg-chevron-right\"></i>\n    <core-box padding=\"md\">Content</core-box>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n\n## Animate content\n\n### With max-width\n\n<core-knobs hideTabs element=\"core-accordion\">\n<style>\n  .animate::part(content) {\n    display: block;\n    overflow: hidden;\n    max-height: 0;\n    transition: max-height 0.5s ease;\n  }\n  .animate[open]::part(content) {\n    max-height: 100px;\n  }\n</style>\n<core-accordion>\n  <core-accordion-item class=\"animate\" heading=\"Heading\">\n    <core-box padding=\"md\">Content</core-box>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n\n### With keyframes\n\nUnfortunately you cannot apply keyframes on a CSS shadow part.\nBecause of this you will need to add keyframes on the slotted content like this:\n\n<core-knobs hideTabs element=\"core-accordion\">\n<style>\n  @keyframes dropdown {\n    0% {\n      transform: rotateX(-90deg);\n    }\n    40% {\n      transform: rotateX(20deg);\n    }\n    100% {\n      transform: rotateX(0deg);\n    }\n  }\n  .animate-2 .content {\n    perspective: 1000px;\n  }\n  .animate-2[open] core-box {\n    animation: 650ms both dropdown;\n  }\n</style>\n<core-accordion>\n  <core-accordion-item class=\"animate-2\" heading=\"Heading\">\n    <div class=\"content\">\n    <core-box padding=\"md\">\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n    </core-box>\n    </div>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n\n## Custom\n\nYou can override the styles of the trigger by using the `::part(trigger)` selector.\nRemember that the default outline styles are defined with box-shadow and not with outline.\n\n<core-knobs hideTabs element=\"core-accordion\">\n<style>\n  .custom core-accordion-item {\n    border: 1px solid var(--core-color-ui);\n    border-radius: var(--core-border-radius-md);\n  }\n  /* Use focus within to style the box when it has focus */\n  .custom core-accordion-item:focus-within {\n    border-color: var(--core-color-focus);\n  }\n  .custom core-accordion-item::part(trigger):focus {\n    color: var(--core-color-focus);\n    box-shadow: none;\n  }\n  .custom core-accordion-item::part(trigger):hover {\n    color: var(--core-color-focus);\n  }\n  .custom core-accordion-item[open] .gg-add-r,\n  .custom core-accordion-item .gg-remove-r {\n    display: none;\n  }\n  .custom core-accordion-item[open] .gg-remove-r,\n  .custom core-accordion-item .gg-add-r {\n    display: inline-block;\n    margin-right: var(--core-space-md);\n  }\n</style>\n<core-accordion class=\"custom\">\n  <core-accordion-item size=\"lg\" heading=\"How do I do this?\" hide-default-indicator>\n    <i slot=\"start\" class=\"gg-add-r\"></i>\n    <i slot=\"start\" class=\"gg-remove-r\"></i>\n    <core-box padding=\"md\">This is how you do it</core-box>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n\n## Another example\n\n<core-knobs hideTabs element=\"core-accordion\">\n<style>\n  .custom-2 core-accordion-item {\n    border: 0;\n    box-shadow: var(--core-depth-sm);\n    position: relative;\n    margin-bottom: var(--core-space-sm);\n  }\n  .custom-2 [slot=\"trigger\"] {\n    padding: var(--core-space-md);\n  }\n  .custom-2 core-accordion-item {\n    border: 0;\n  }\n  .custom-2 core-button {\n    position: absolute;\n    right: var(--core-space-md);\n    bottom: calc(var(--core-space-md) * -1);\n  }\n  .custom-2 core-accordion-item[open] ion-icon {\n    transform: rotate(180deg);\n  }\n</style>\n<core-accordion mode=\"single\" class=\"custom-2\">\n  <core-accordion-item size=\"lg\" heading=\"How do I do this?\" hide-default-indicator>\n    <div slot=\"trigger\">\n      Hello\n      <core-button variant=\"primary\">\n        <ion-icon name=\"arrow-down-outline\"></ion-icon>\n      </core-button>\n    </div>\n    <core-box padding=\"md\">This is how you do it</core-box>\n  </core-accordion-item>\n  <core-accordion-item size=\"lg\" heading=\"How do I do this?\" hide-default-indicator>\n    <div slot=\"trigger\">\n      Hello\n      <core-button variant=\"primary\">\n          <ion-icon name=\"arrow-down-outline\"></ion-icon>\n      </core-button>\n    </div>\n    <core-box padding=\"md\">This is how you do it</core-box>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n\n## With a menu\n\n<core-knobs hideTabs element=\"core-accordion\">\n<core-accordion>\n  <core-accordion-item heading=\"Hello\">\n    <core-menu>\n      <core-menu-item>Menu Item 1</core-menu-item>\n      <core-menu-item>Menu Item 2</core-menu-item>\n      <core-menu-item>Menu Item 3</core-menu-item>\n    </core-menu>\n  </core-accordion-item>\n</core-accordion>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/box/box.md",
      "name": "Box",
      "desc": "A general purpose box with padding, border, depth and more",
      "category": "Layout",
      "icon": "cube-outline",
      "content": "\n<core-knobs element=\"core-box\">\n<core-box padding=\"lg\" depth=\"md\">Box</core-box>\n</core-knobs>\n\n## Card\n\n<core-knobs hideTabs element=\"core-box\">\n  <core-box bg=\"white\" inline depth=\"sm\" border=\"ui-weakest\">\n    <img width=\"400\" height=\"250\" src=\"https://placeimg.com/400/250/tech\">\n    <core-box padding=\"md\">\n      <core-text tag=\"h2\">Card Title</core-text>\n      <core-text tag=\"h6\">Subtitle</core-text>\n      <core-box margin-y=\"md\">\n        <core-button variant=\"primary\">Click me</core-button>\n      </core-box>\n    </core-box>\n  </core-box>\n</core-knobs>\n\n## Pricing table\n\n<core-knobs hideTabs element=\"core-box\">\n<style>\n  .pricing {\n    min-width: 500px;\n  }\n  .pricing ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n  .pricing li {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  .pricing i {\n    margin-right: 10px;\n  }\n</style>\n<core-box class=\"pricing\" bg=\"ui-weakest\" padding=\"lg\" inline depth=\"sm\">\n  <core-text tag=\"h2\">Small</core-text>\n  <core-text tag=\"p\" color=\"weak\" >Free</core-text>\n  <core-box margin-y=\"lg\">\n    <ul full size=\"md\">\n      <li>\n      <i class=\"gg-check-o\"></i>\n      Figma & Sketch Files\n      </li>\n      <li>\n      <i class=\"gg-check-o\"></i>\n      Customizable styles\n      </li>\n      <li>\n      <i class=\"gg-check-o\"></i>\n      Base elements\n      </li>\n      <li>\n      <i class=\"gg-remove\"></i>\n      Headache\n      </li>\n    </ul>\n  </core-box>\n  <core-button full variant=\"primary\">Start your free trial</core-button>\n</core-box>\n</core-knobs>\n\n## Alerts\n\n<core-knobs hideTabs element=\"core-box\">\n  <core-box radius=\"md\" margin-b=\"md\" padding=\"lg\" color=\"success\" bg=\"white\" full border=\"success\">\n    <core-text>Great! You successfully did a thing!</core-text>\n  </core-box>\n  </core-box>\n  <core-box radius=\"md\" margin-b=\"md\" padding=\"lg\" color=\"warning\" bg=\"white\" full border=\"warning\">\n    <core-text>Ops! You encountered something dangerous!</core-text>\n  </core-box>\n  </core-box>\n  <core-box radius=\"md\" margin-b=\"md\" padding=\"lg\" color=\"danger\" bg=\"white\" full border=\"danger\">\n    <core-text>Oy! What are you doing?!</core-text>\n  </core-box>\n  </core-box>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/button/button.md",
      "name": "Button",
      "desc": "A general button element",
      "category": "Interaction",
      "icon": "tablet-landscape-outline",
      "content": "\n<core-knobs  tab=\"props\" element=\"core-button\">\n<core-button>Button</core-button>\n</core-knobs>\n\n## Variants\n\n<core-knobs hideTabs  element=\"core-button\">\n<core-button>Normal</core-button>\n<core-button variant=\"primary\">Primary</core-button>\n<core-button variant=\"success\">Success</core-button>\n<core-button variant=\"warning\">Warning</core-button>\n<core-button variant=\"danger\">Danger</core-button>\n<core-button variant=\"transparent\">Transparent</core-button>\n</core-knobs>\n\n## Rounded\n\n<core-knobs hideTabs element=\"core-button\">\n<core-button rounded>Rounded</core-button>\n</core-knobs>\n\n## Disabled\n\n<core-knobs hideTabs  element=\"core-button\">\n<core-button onclick=\"alert('hello')\" disabled variant=\"primary\">\n  Primary\n</core-button>\n</core-knobs>\n\n## Sizes\n\n<core-knobs hideTabs  element=\"core-button\">\n<core-button size=\"sm\">Small</core-button>\n<core-button size=\"md\">Medium</core-button>\n<core-button size=\"lg\">Large</core-button>\n</core-knobs>\n\n## Full\n\n<core-knobs hideTabs  element=\"core-button\">\n<core-button full>Full</core-button>\n</core-knobs>\n\n## With icons\n\n<core-knobs hideTabs  element=\"core-button\">\n<core-button>\n  <i slot=\"start\" class=\"gg-check\"></i>\n  Left\n</core-button>\n<core-button>\n  <i slot=\"end\" class=\"gg-danger\"></i>\n  Right\n</core-button>\n<core-button squared>\n  <i class=\"gg-profile\"></i>\n</core-button>\n</core-knobs>\n\n## Group\n\n<core-knobs hideTabs  element=\"core-button\">\n<style>\n  .group {\n    display: flex;\n  }\n  .group core-button {\n    border-radius: 0;\n  }\n  .group core-button:first-of-type {\n    border-top-left-radius: var(--core-border-radius-default);\n    border-bottom-left-radius: var(--core-border-radius-default);\n  }\n  .group core-button:last-of-type {\n    border-top-right-radius: var(--core-border-radius-default);\n    border-bottom-right-radius: var(--core-border-radius-default);\n  }\n</style>\n<div class=\"group\">\n  <core-button >Option</core-button>\n  <core-button >Option</core-button>\n  <core-button variant=\"primary\">Active</core-button>\n  <core-button>Option</core-button>\n</div>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/checkbox/checkbox.md",
      "name": "Checkbox",
      "desc": "A checkbox element",
      "category": "Form",
      "icon": "checkbox-outline",
      "content": "\n<core-knobs element=\"core-checkbox\">\n  <core-checkbox label=\"Checkbox\"></core-checkbox>\n</core-knobs>\n\n## Sizes\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <core-checkbox size=\"sm\">Sm</core-checkbox>\n  <core-checkbox size=\"md\">Md</core-checkbox>\n  <core-checkbox size=\"lg\">Lg</core-checkbox>\n</core-knobs>\n\n## Animate indicator\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <style>\n    .animate:active::part(box) {\n      transform: scale(0.85);\n    }\n    .animate::part(box) {\n      transform: scale(1);\n      transition: all 0.2s ease;\n    }\n    .animate::part(indicator) {\n      opacity: 0;\n      transition: all 0.5s ease;\n      transform: rotate(-90deg);\n    }\n    .animate[checked]::part(indicator) {\n      opacity: 1;\n      transform: rotate(0deg);\n      color: var(--core-color-white);\n    }\n  </style>\n  <core-checkbox class=\"animate\">\n    Animate default indicator\n  </core-checkbox>\n</core-knobs>\n\n## Label position\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <style>\n    .position {\n      flex-direction: row-reverse;\n    }\n    .position::part(label) {\n      margin-right: var(--core-space-md);\n      margin-left: 0;\n    }\n  </style>\n  <core-checkbox label=\"Left label\" class=\"position\"></core-checkbox>\n</core-knobs>\n\n## Style the box\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <style>\n    .box::part(box) {\n      border-radius: 50%;\n    }\n  </style>\n  <core-checkbox class=\"box\">\n    Custom indicator box\n  </core-checkbox>\n</core-knobs>\n\n## Custom indicator\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <core-checkbox>\n    <i slot=\"indicator\" class=\"gg-close\"></i>\n    Checkbox with custom icon\n  </core-checkbox>\n</core-knobs>\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <style>\n    .heart::part(box) {\n      border: 0;\n      background: none;\n      box-shadow: none;\n    }\n    .heart [slot=\"indicator\"] {\n      color: lightgray;\n    }\n    .heart:hover [slot=\"indicator\"] {\n      color: gray;\n    }\n    .heart[checked] [slot=\"indicator\"] {\n      color: red;\n    }\n  </style>\n  <core-checkbox class=\"heart\">\n    <i slot=\"indicator\" class=\"gg-heart\"></i>\n    Remove default box styling\n  </core-checkbox>\n</core-knobs>\n\n## Choice buttons\n\n<core-knobs hideTabs  element=\"core-checkbox\">\n  <style>\n    .choice {\n      margin-bottom: var(--core-space-md);\n      padding: var(--core-space-md);\n      height: auto;\n      border: 2px solid var(--core-color-ui);\n    }\n    .choice:hover {\n      border-color: var(--core-color-ui);\n    }\n    .choice[checked] {\n      border-color: var(--core-color-focus);\n    }\n  </style>\n  <core-checkbox class=\"choice\" full>\n    <core-text tag=\"div\" look=\"h3\">French Fries</core-text>\n    <core-text tag=\"div\" look=\"p\">They're really good</core-text>\n  </core-checkbox>\n  <core-checkbox class=\"choice\" full>\n    <core-text tag=\"div\" look=\"h3\">Cheddar</core-text>\n    <core-text tag=\"div\" look=\"p\">Melted over yummy stuff</core-text>\n  </core-checkbox>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/container/container.md",
      "name": "Container",
      "desc": "An element to limit the width of your content",
      "category": "Layout",
      "icon": "scan-outline",
      "content": "\n<core-knobs  element=\"core-container\">\n<core-container style=\"border: 1px solid gray\">Container</core-container>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/flex/flex.md",
      "name": "Flex",
      "desc": "Utility element to flex children",
      "category": "Layout",
      "icon": "ellipsis-horizontal-outline",
      "content": "\n<core-knobs  tab=\"props\" element=\"core-flex\">\n<core-flex>\n<core-button>Button</core-button>\n<core-button>Button 2</core-button>\n<core-button>Button 3</core-button>\n</core-flex>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/grid/grid.md",
      "name": "Grid",
      "desc": "Grid system elements",
      "category": "Layout",
      "icon": "grid-outline",
      "content": "\n<core-knobs  element=\"core-grid\">\n<core-grid>\n  <core-grid-item style=\"border: 1px solid gray\" sm=\"12\" md=\"6\">\n    Grid Item 1\n  </core-grid-item>\n  <core-grid-item style=\"border: 1px solid gray\" sm=\"12\" md=\"4\">\n    Grid Item 2\n  </core-grid-item>\n  <core-grid-item style=\"border: 1px solid gray\" sm=\"12\" md=\"2\">\n    Grid Item 3\n  </core-grid-item>\n</core-grid>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/input/input.md",
      "name": "Input",
      "desc": "A input element",
      "category": "Form",
      "icon": "pencil-outline",
      "content": "\n<core-knobs  element=\"core-input\">\n<core-input placeholder=\"Optional placeholder\"></core-input>\n</core-knobs>\n\n## Sizes\n\n<core-knobs hideTabs  element=\"core-input\">\n<core-input size=\"sm\" placeholder=\"Small\"></core-input>\n<core-input size=\"md\" placeholder=\"Medium\"></core-input>\n<core-input size=\"lg\" placeholder=\"Large\"></core-input>\n</core-knobs>\n\n## Search\n\n<core-knobs hideTabs  element=\"core-input\">\n<core-input type=\"search\" placeholder=\"Search...\">\n  <ion-icon style=\"font-size: 1em\" slot=\"start\" name=\"search-outline\"></ion-icon>\n</core-input>\n</core-knobs>\n\n## Autocomplete\n\n<core-knobs hideTabs  element=\"core-input\">\n<core-input autocomplete=\"email\" type=\"email\" placeholder=\"Email\">\n</core-input>\n</core-knobs>\n\n## Number\n\n<core-knobs hideTabs  element=\"core-input\">\n<style>\n  #NumberInput {\n    min-width: 50px;\n    text-align: center;\n  }\n</style>\n<core-button onclick=\"NumberInput.stepDown()\">-</core-button>\n<core-input id=\"NumberInput\" max=\"100\" min=\"0\" readonly step=\"10\" value=\"0\" type=\"number\" ></core-input>\n<core-button onclick=\"NumberInput.stepUp()\">+</core-button>\n</core-knobs>\n\n## Validation\n\n### Auto validation\n\nTo autovalidate an input field, provide the `validate` attribute.\n\n<core-knobs hideTabs  element=\"core-input\">\n<core-input required  validate placeholder=\"Required input\">\n<div slot=\"error\">This field is required</div>\n</core-input>\n</core-knobs>\n\nThe input field will indicate an error if the input value is invalid.\n\n`Validate` can also be set to `valid`, `invalid` or `both`, depending if you want the validation to indicate when the value is valid, invalid or both.\n\n### Validate on input\n\nUse `validate-on` to decide which event you want to do the validation on.\n\n<core-knobs hideTabs  element=\"core-input\">\n<core-input required type=\"email\" validate=\"both\" validate-on=\"input\" placeholder=\"Enter email\">\n  <ion-icon style=\"font-size: 1em\" slot=\"start\" name=\"mail-outline\"></ion-icon>\n</core-input>\n</core-knobs>\n\n### Validation with status icons\n\n<core-knobs hideTabs  element=\"core-input\">\n<style>\n  @keyframes fadein {\n    from {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n  .status [slot=\"end\"] {\n    display: none;\n  }\n  .status[valid] .check,\n  .status[invalid] .error {\n    display: block;\n    animation: fadein 0.2s ease;\n  }\n  .status[valid] .check {\n    color: var(--core-color-success);\n  }\n  .status[invalid] .error {\n    color: var(--core-color-danger);\n  }\n</style>\n<core-input class=\"status\" required type=\"email\" validate=\"both\" validate-on=\"input\" placeholder=\"Enter email\">\n  <ion-icon slot=\"end\" class=\"check\" name=\"checkmark-outline\"></ion-icon>\n  <ion-icon slot=\"end\" class=\"error\" name=\"alert-circle-outline\"></ion-icon>\n</core-input>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/label/label.md",
      "name": "Label",
      "desc": "Input label",
      "category": "Form",
      "icon": "information-outline",
      "content": "\n<core-knobs hideEvents tab=\"src\"  element=\"core-label\">\n<core-label>Label</core-label>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/menu/menu.md",
      "name": "Menu",
      "desc": "Menu",
      "category": "Interaction",
      "icon": "menu-outline",
      "content": "\n<core-knobs element=\"core-menu\">\n  <core-menu bordered>\n    <core-menu-item>\n      Menu item\n    </core-menu-item>\n    <core-menu-item>\n      Menu item\n    </core-menu-item>\n  </core-menu>\n</core-knobs>\n\n## With icons\n\n<core-knobs element=\"core-menu\">\n  <core-menu bordered>\n    <core-menu-item>\n     <i slot=\"start\" class=\"gg-check\"></i>\n      Menu item\n      <i slot=\"end\" class=\"gg-chevron-right\"></i>\n    </core-menu-item>\n    <core-menu-item>\n      <i slot=\"start\" class=\"gg-check\"></i>\n      Menu item\n      <i slot=\"end\" class=\"gg-chevron-right\"></i>\n    </core-menu-item>\n  </core-menu>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/modal/modal.md",
      "name": "Modal",
      "desc": "A modal",
      "category": "Interaction",
      "icon": "albums-outline",
      "content": "\n<core-button onclick=\"modal.show()\">Show modal</core-button>\n\n<core-knobs  element=\"core-modal\">\n<core-modal id=\"modal\">\n  Modal content\n</core-modal>\n</core-knobs>\n\n## As sidebar\n\n<core-button onclick=\"sidebar.show()\">Show sidebar</core-button>\n\n<core-knobs  element=\"core-modal\">\n<style>\n#sidebar {\n  --core-modal-max-width: 90vw;\n  --core-modal-width: auto;\n  --core-modal-min-width: 400px;\n  --core-modal-min-height: 100vh;\n  --core-modal-translateY: 0px;\n  --core-modal-translateX: -100%;\n  --core-modal-justify: start;\n}\n#sidebar[open] {\n  --core-modal-translateY: 0px;\n  --core-modal-translateX: 0px;\n}\n</style>\n<core-modal id=\"sidebar\">\nModal content\n</core-modal>\n</core-knobs>\n\n## With Heading\n\n<core-button onclick=\"modalTwo.show()\">Show modal</core-button>\n\n<core-knobs hideTabs  element=\"core-modal\">\n<core-modal heading=\"Heading\" id=\"modalTwo\">\n  Modal content\n</core-modal>\n</core-knobs>\n\n## Slots\n\n### Header start, middle, end\n\n<core-button onclick=\"modalThree.show()\">Show modal</core-button>\n\n<core-knobs hideTabs  element=\"core-modal\">\n<core-modal id=\"modalThree\">\n  <core-button slot=\"header-start\" type=\"transparent\" onclick=\"modalThree.close()\" size=\"sm\">Close</core-button>\n  <core-text slot=\"header-middle\">Heading</core-text>\n  <core-button slot=\"header-end\" type=\"transparent\" size=\"sm\">Save</core-button>\n  Modal content\n</core-modal>\n</core-knobs>\n\n### Header\n\n<core-button onclick=\"modalFour.show()\">Show modal</core-button>\n\n<core-knobs hideTabs  element=\"core-modal\">\n<core-modal id=\"modalFour\">\n<header slot=\"header\">Modal header</header>\n  Modal content\n</core-modal>\n</core-knobs>\n\n### Footer\n\n<core-button onclick=\"modalFive.show()\">Show modal</core-button>\n\n<core-knobs hideTabs  element=\"core-modal\">\n<core-modal id=\"modalFive\">\n  Modal content\n  <core-button slot=\"footer\" full type=\"primary\">Save</core-button>\n</core-modal>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/overlay/overlay.md",
      "name": "Overlay",
      "desc": "Overlay",
      "category": "Interaction",
      "icon": "chatbox-outline",
      "content": "\n<core-knobs hideEvents element=\"core-overlay\">\n<core-overlay>\n  <core-button slot=\"trigger\" full>Button</core-button>\n  <core-box slot=\"content\" padding=\"sm\" depth=\"sm\">\n    <core-text>Hello</core-text>\n  </core-box>\n</core-overlay>\n</core-knobs>\n\n## Hoverable\n\n<core-overlay hoverable>\n  <core-button slot=\"trigger\" full>Button</core-button>\n  <core-box slot=\"content\" padding=\"sm\" depth=\"sm\">\n    <core-text>Hello</core-text>\n  </core-box>\n</core-overlay>\n</core-knobs>\n\n## Examples\n\n### Select\n\n<core-knobs hideTabs element=\"core-overlay\">\n<core-overlay id=\"overlay\" position-x=\"center\" position-y=\"center\">\n  <core-button slot=\"trigger\" full>Button</core-button>\n  <core-box style=\"width: 200px\" bg=\"white\" slot=\"content\" depth=\"sm\" >\n  <core-menu onclick=\"overlay.open = false\" bordered>\n    <core-menu-item>Option 1</core-menu-item>\n    <core-menu-item>Option 2</core-menu-item>\n  </core-menu>\n  </core-box>\n</core-overlay>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/radio/radio.md",
      "name": "Radio",
      "desc": "Radio button",
      "category": "Form",
      "icon": "radio-button-on-outline",
      "content": "\n<core-knobs  element=\"core-radio\">\n<core-radio name=\"example-1\" value=\"1\">Option 1</core-radio>\n<core-radio name=\"example-1\" value=\"2\">Option 2</core-radio>\n<core-radio name=\"example-1\" value=\"3\">Option 3</core-radio>\n<core-radio name=\"example-1\" value=\"4\" disabled>Option 4</core-radio>\n</core-knobs>\n\n## Custom icons\n\n<core-knobs hideTabs  element=\"core-radio\">\n<style>\n  .animate [slot=\"indicator\"] {\n    transform: rotate(-45deg);\n    transition: transform 0.4s ease;\n  }\n  .animate[checked] [slot=\"indicator\"] {\n    transform: rotate(0deg);\n  }\n</style>\n\n<core-radio class=\"animate\" name=\"example-3\">\n  Radio\n  <i slot=\"indicator\" class=\"gg-check\"></i>\n</core-radio>\n<core-radio class=\"animate\" name=\"example-3\">\n  Radio\n  <i slot=\"indicator\" class=\"gg-check\"></i>\n</core-radio>\n</core-knobs>\n\n## Choice buttons\n\n<core-knobs hideTabs  element=\"core-radio\">\n<style>\n  core-radio.choice {\n    margin-bottom: var(--core-space-md);\n    padding: 0 var(--core-space-md);\n    height: var(--core-element-height-xl);\n    border: 2px solid var(--core-color-ui);\n  }\n  core-radio.choice:hover {\n    border-color: var(--core-color-ui);\n  }\n  core-radio.choice[checked] {\n    border-color: var(--core-color-focus);\n  }\n</style>\n\n<core-radio class=\"choice\" name=\"example-4\" full>\n  <core-flex justify-content=\"between\" align-items=\"center\">\n  <div>\n    <core-text tag=\"div\" look=\"h3\">Standard delivery</core-text>\n    <core-text tag=\"div\" look=\"p\">4-5 days</core-text>\n  </div>\n  <div>\n    <core-text tag=\"h3\">19$</core-text>\n  </div>\n  </core-flex>\n</core-radio>\n<core-radio class=\"choice\" name=\"example-4\" full>\n  <core-flex justify-content=\"between\" align-items=\"center\">\n  <div>\n    <core-text tag=\"div\" look=\"h3\">Express delivery</core-text>\n    <core-text tag=\"div\" look=\"p\">1-2 days</core-text>\n  </div>\n  <div>\n    <core-text tag=\"h3\">30$</core-text>\n  </div>\n  </core-flex>\n</core-radio>\n\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/range/range.md",
      "name": "Range",
      "desc": "Range",
      "category": "Form",
      "icon": "options-outline",
      "content": "\n<core-knobs element=\"core-range\">\n  <core-range sensitivity=\"0.8\" step=\"1\" value=\"10\"><core-range>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/select/select.md",
      "name": "Select",
      "desc": "Element with option for multiselect, search and more",
      "category": "Form",
      "icon": "caret-down-circle-outline",
      "content": "\n<core-knobs  element=\"core-select\">\n  <core-select>\n    <core-option value=\"Option 1\" selected></core-option>\n    <core-option value=\"Option 2\" disabled></core-option>\n    <core-option value=\"Option 3\"></core-option>\n    <core-option value=\"Option 4\"></core-option>\n  </core-select>\n</core-knobs>\n\n## Searchable\n\n<core-knobs hideTabs  element=\"core-select\">\n  <core-select searchable clearable placeholder=\"Search\">\n    <core-option value=\"Option 1\"></core-option>\n    <core-option value=\"Option 2\"></core-option>\n    <core-option value=\"Option 3\"></core-option>\n  </core-select>\n</core-knobs>\n\n## No options feedback\n\n<core-knobs hideTabs  element=\"core-select\">\n  <core-select searchable placeholder=\"Search with no results\">\n    <core-option value=\"Option 1\"></core-option>\n    <div slot=\"no-options\">No results found</div>\n  </core-select>\n</core-knobs>\n\n## Animate\n\n### With keyframes\n\n<core-knobs hideTabs  element=\"core-select\">\n  <style>\n    .keyframes {\n      perspective: 1000px;\n    }\n    .keyframes::part(list) {\n      transform-origin: top;\n      transition: all 0.2s cubic-bezier(0.13, 0.06, 0.03, 0);\n      transform: rotateX(-90deg);\n    }\n    .keyframes[list-open]::part(list) {\n      transform-origin: top;\n      transform: rotateX(0deg);\n      transition: all 0.4s cubic-bezier(0.13, 0.06, 0.03, 1.5);\n    }\n  </style>\n  <core-select class=\"keyframes\" full>\n      <core-option value=\"Option 1\" selected></core-option>\n      <core-option value=\"Option 2\"></core-option>\n      <core-option value=\"Option 3\" selected></core-option>\n      <core-option value=\"Option 4\"></core-option>\n      <core-option value=\"Option 5\" selected></core-option>\n      <core-option value=\"Option 6\" selected></core-option>\n  </core-select>\n</core-knobs>\n\n## Multiple\n\n<core-knobs hideTabs  element=\"core-select\">\n  <style>\n    core-select[multiple] core-option[selected] {\n      display: none;\n    }\n  </style>\n  <core-select full multiple list-open-on-select>\n    <core-option value=\"Option 1\" selected></core-option>\n    <core-option value=\"Option 2\"></core-option>\n    <core-option value=\"Option 3\" selected></core-option>\n    <core-option value=\"Option 4\"></core-option>\n    <core-option value=\"Option 5\" selected></core-option>\n    <core-option value=\"Option 6\" selected></core-option>\n  </core-select>\n</core-knobs>\n\n## Grouped\n\n<core-knobs hideTabs  element=\"core-select\">\n  <core-select immediate-select>\n    <core-optgroup label=\"Group 1\">\n      <core-option value=\"Option 1\" selected></core-option>\n      <core-option value=\"Option 2\"></core-option>\n      <core-option value=\"Option 3\"></core-option>\n    </core-optgroup>\n    <core-optgroup label=\"Group 2\">\n      <core-option value=\"Option 4\" selected></core-option>\n      <core-option value=\"Option 5\"></core-option>\n      <core-option value=\"Option 6\"></core-option>\n    </core-optgroup>\n  </core-select>\n</core-knobs>\n\n### Grouped with icons\n\n<core-knobs hideTabs  element=\"core-select\">\n  <core-select>\n    <core-optgroup label=\"Group 1\">\n      <ion-icon slot=\"start\" name=\"people-outline\"></ion-icon>\n      <core-option value=\"Option 1\" selected></core-option>\n      <core-option value=\"Option 2\"></core-option>\n      <core-option value=\"Option 3\"></core-option>\n    </core-optgroup>\n    <core-optgroup label=\"Group 2\">\n      <ion-icon slot=\"start\" name=\"person-outline\"></ion-icon>\n      <core-option value=\"Option 4\" selected></core-option>\n      <core-option value=\"Option 5\"></core-option>\n      <core-option value=\"Option 6\"></core-option>\n    </core-optgroup>\n  </core-select>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/slider/slider.md",
      "name": "Slider",
      "desc": "A slider",
      "category": "Interaction",
      "content": "\n<core-knobs element=\"core-slider\">\n<core-slider navigation >\n  <core-slider-item name=\"first\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 1</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"second\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 2</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"third\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 3</core-box>\n  </core-slider-item>\n</core-slider>\n</core-knobs>\n\n## Prev and Next\n\n<core-knobs hideProps hideEvents element=\"core-slider\">\n<core-slider id=\"Controls\">\n  <core-slider-item name=\"first\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 1</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"second\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 2</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"third\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 3</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"fourth\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 4</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"fifth\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 5</core-box>\n  </core-slider-item>\n</core-slider>\n\n<core-button onclick=\"Controls.prev()\">Prev</core-button>\n<core-button onclick=\"Controls.next()\">Next</core-button>\n\n</core-knobs>\n\n## Slides to show\n\n<core-knobs  element=\"core-slider\">\n<style>\n  .three {\n    --core-slider-item-gap: var(--core-space-md);\n    --core-slider-padding: var(--core-space-md);\n    --core-slider-item-width: 33.33%;\n  }\n</style>\n\n<core-slider class=\"three\" snap-align=\"center\">\n  <core-slider-item name=\"first\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 1</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"second\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 2</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"third\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 3</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"fourth\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 4</core-box>\n  </core-slider-item>\n  <core-slider-item name=\"fifth\">\n    <core-box depth=\"sm\" bg=\"ui-weak\" padding=\"lg\">Hello 5</core-box>\n  </core-slider-item>\n</core-slider>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/tabs/tabs.md",
      "name": "Tabs",
      "desc": "Tabs for things",
      "category": "Interaction",
      "icon": "library-outline",
      "content": "\n<core-knobs element=\"core-tabs\">\n<core-tabs>\n  <core-tab selected>Tab 1</core-tab>\n  <core-tab>Tab 2</core-tab>\n</core-tabs>\n</core-knobs>\n\n## With targets\n\n<core-knobs  element=\"core-tabs\">\n<core-tabs full>\n  <core-tab selected target=\"targetOne\">Tab 1</core-tab>\n  <core-tab target=\"targetTwo\">Tab 2</core-tab>\n</core-tabs>\n<div id=\"targetOne\">Target 1</div>\n<div id=\"targetTwo\">Target 2</div>\n</core-knobs>\n\n## Vertical\n\n<core-knobs  element=\"core-tabs\">\n<core-tabs full vertical>\n  <core-tab selected>Tab 1</core-tab>\n  <core-tab>Tab 2</core-tab>\n</core-tabs>\n</core-knobs>\n\n## Button style\n\n<core-knobs  element=\"core-tabs\">\n<style>\n  .buttons core-tab {\n    border: 2px solid var(--core-color-ui);\n    margin: 0;\n    background: var(--core-color-white);\n  }\n  .buttons core-tab:not(:first-of-type) {\n    border-left: 0; \n  }\n  .buttons core-tab:first-of-type {\n    border-top-left-radius: var(--core-border-radius-default);\n    border-bottom-left-radius: var(--core-border-radius-default);\n  }\n  .buttons core-tab:last-of-type {\n    border-top-right-radius: var(--core-border-radius-default);\n    border-bottom-right-radius: var(--core-border-radius-default);\n  }\n  .buttons core-tab[selected] {\n    background: var(--core-color-ui-weak);\n  }\n</style>\n<core-tabs class=\"buttons\">\n  <core-tab selected target=\"targetOne\">Tab 1</core-tab>\n  <core-tab target=\"targetTwo\">Tab 2</core-tab>\n</core-tabs>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/text/text.md",
      "name": "Text",
      "desc": "A general purpose text element",
      "category": "Layout",
      "icon": "text-outline",
      "content": "\n<core-knobs  element=\"core-text\">\n<core-text tag=\"h1\">Core text</core-text>\n</core-knobs>\n\n## Tags\n\n<core-knobs hideTabs  element=\"core-text\">\n  <core-text tag=\"h1\">Typography H1</core-text>\n  <core-text tag=\"h2\">Typography H2</core-text>\n  <core-text tag=\"h3\">Typography H3</core-text>\n  <core-text tag=\"h4\">Typography H4</core-text>\n  <core-text tag=\"h5\">Typography H5</core-text>\n  <core-text tag=\"h6\">Typography H6</core-text>\n  <core-text tag=\"p\">Typography P</core-text>\n  <core-text full tag=\"small\">Typography Small</core-text>\n  <core-text full tag=\"b\">Typography B</core-text>\n  <core-text full tag=\"i\">Typography I</core-text>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/textarea/textarea.md",
      "name": "Text Area",
      "desc": "A general purpose text element",
      "category": "Form",
      "content": "\n<core-knobs  element=\"core-textarea\">\n<core-textarea></core-textarea>\n</core-knobs>\n"
    },
    {
      "path": "../lib/src/components/toggle/toggle.md",
      "name": "Toggle",
      "desc": "A general toggle element",
      "category": "Form",
      "icon": "toggle-outline",
      "content": "\n<core-knobs element=\"core-toggle\">\n<core-toggle>Toggle</core-toggle>\n</core-knobs>\n\n## Custom icons\n\n### On / Off\n\n<core-knobs hideTabs  element=\"core-toggle\">\n<core-toggle checked>\n  <ion-icon slot=\"on\" name=\"sunny-outline\"></ion-icon>\n  Label\n  <ion-icon slot=\"off\" name=\"moon-outline\"></ion-icon>\n</core-toggle>\n</core-knobs>\n\n## Label position\n\n<core-knobs hideTabs  element=\"core-toggle\">\n  <style>\n    .position {\n      flex-direction: row-reverse;\n    }\n    .position::part(label) {\n      margin-right: var(--core-space-md);\n      margin-left: 0;\n    }\n  </style>\n  <core-toggle label=\"Left label\" class=\"position\"></core-toggle>\n</core-knobs>\n\n### Indicator icon\n\n<core-knobs hideTabs  element=\"core-toggle\">\n<style>\n  .indicator-icon [slot=\"indicator\"]{\n    display: none;\n  }\n  .indicator-icon[checked] [slot=\"indicator\"]{\n    display: block;\n  }\n</style>\n<core-toggle class=\"indicator-icon\" checked>\n   <ion-icon slot=\"indicator\" name=\"checkmark-outline\">\n  Label\n</core-toggle>\n</core-knobs>\n\n## Animate icon\n\n<core-knobs hideTabs  element=\"core-toggle\">\n<style>\n  .toggle-animation [slot=\"on\"] {\n    transition: all 0.5s ease;\n    transform: rotate(-45deg);\n  }\n  .toggle-animation[checked] [slot=\"on\"] {\n    transform: rotate(0deg);\n  }\n</style>\n<core-toggle class=\"toggle-animation\">\n  <ion-icon slot=\"on\" name=\"checkmark-sharp\"></ion-icon>\n  Label\n</core-toggle>\n</core-knobs>\n"
    }
  ]
}